#pragma only_renderers d3d11 playstation xboxone vulkan metal switch

#pragma multi_compile_local _ USE_CLOUD_MAP
#pragma multi_compile_local _ USE_CLOUD_MOTION
#pragma multi_compile_local _ USE_SECOND_CLOUD_MAP
#pragma multi_compile_local _ USE_SECOND_CLOUD_MOTION

#pragma kernel ComputeCloudShadows KERNEL_NAME=ComputeCloudShadows

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Sky/SkyUtils.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Sky/CloudLayer/CloudLayer.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"

RW_TEXTURE2D(float, _CloudShadowsOutput);

float4 _Params;
float4 _Params1;
float4 _Params2;

#define _SunForward         _Params.xyz
#define _SunRight           _Params1.xyz
#define _SunUp              _Params2.xyz
#define _Resolution         _Params.w
#define _CloudShadowOpacity _Params1.w

float ComputeCloudShadow(float2 uv)
{
    const float width = 0.15;
    float3 dir = -_SunForward + uv.x * width * _SunRight + uv.y * width * _SunUp;

    return GetCloudOpacity(normalize(dir));
}

[numthreads(8, 8, 1)]
void KERNEL_NAME(uint2 dispatchThreadId : SV_DispatchThreadID)
{
    float2 uv = float2(dispatchThreadId.x * _Resolution, 1.0 - dispatchThreadId.y * _Resolution) * 2.0 - 1.0;
    float shadow = ComputeCloudShadow(uv);

    // Blend with the other borders to make the texture tileable
    const float border = 0.3;
    float2 uv2 = uv - (1.0 - border);
    float2 weights = saturate(uv2 / border);

    if (uv2.x > 0.0)
        shadow = lerp(shadow, ComputeCloudShadow(uv - float2(2.0, 0.0)), weights.x);

    if (uv2.y > 0.0)
    {
        float shadow2 = ComputeCloudShadow(uv - float2(0.0, 2.0));
        if (uv2.x > 0.0)
            shadow2 = lerp(shadow2, ComputeCloudShadow(uv - float2(2.0, 2.0)), weights.x);

        shadow = lerp(shadow, shadow2, weights.y);
    }

    _CloudShadowsOutput[dispatchThreadId] = exp(-shadow * _CloudShadowOpacity);
}
